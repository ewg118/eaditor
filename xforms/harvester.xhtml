<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ev="http://www.w3.org/2001/xml-events"
	xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:ead="urn:isbn:1-931666-22-9"
	xmlns:exist="http://exist.sourceforge.net/NS/exist" xmlns:oai="http://www.openarchives.org/OAI/2.0/" xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/">
	<head>
		<title>EADitor: Edit Settings</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="stylesheet" href="/config/theme/examples.css" type="text/css" media="all" />
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" />
		<script type="text/javascript" src="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/apps/eaditor/xforms/css/xforms.css" />

		<xforms:model xmlns="urn:isbn:1-931666-22-9">
			<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
				<xsd:simpleType name="url">
					<xsd:restriction base="xsd:string">
						<xsd:pattern value="@^(https?|ftp)://[^\s/$.?#].[^\s]*$@iS"></xsd:pattern>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:schema>


			<!-- exist URL is stored in an XML file -->
			<xforms:instance id="exist-config">
				<xi:include href="../exist-config.xml"></xi:include>
			</xforms:instance>

			<xforms:instance id="config" xxf:exclude-result-prefixes="#all">
				<config xmlns=""></config>
			</xforms:instance>

			<xforms:instance id="control-instance" xxf:exclude-result-prefixes="#all">
				<controls xmlns="">
					<status></status>
					<error></error>
					<interface></interface>
					<validate-trigger>false</validate-trigger>
					<oai-valid></oai-valid>
					<collection-name></collection-name>
					<ead-file></ead-file>
					<ead-file-pos></ead-file-pos>
				</controls>
			</xforms:instance>

			<xforms:instance id="test">
				<test xmlns=""></test>
			</xforms:instance>

			<xforms:instance id="collections-list" xxf:exclude-result-prefixes="#all">
				<collections xmlns=""></collections>
			</xforms:instance>

			<xforms:instance id="harvesters" xxf:exclude-result-prefixes="#all">
				<harvesters xmlns=""></harvesters>
			</xforms:instance>

			<xforms:instance id="harvester-template" xxf:exclude-result-prefixes="#all">
				<harvester collection="" type="oai" url="" date="" lastFile="" xmlns=""></harvester>
			</xforms:instance>

			<!-- file list -->
			<xforms:instance id="files" xxf:exclude-result-prefixes="#all">
				<files xmlns=""></files>
			</xforms:instance>

			<xforms:instance id="old-ead" xxf:exclude-result-prefixes="#all">
				<ead xmlns=""></ead>
			</xforms:instance>

			<xforms:instance id="new-ead" xxf:exclude-result-prefixes="#all">
				<ead xmlns=""></ead>
			</xforms:instance>

			<xforms:instance id="ead-template" xxf:exclude-result-prefixes="#all">
				<ead xmlns=""></ead>
			</xforms:instance>

			<!-- OAI-PMH -->
			<xforms:instance id="oai-pmh" xxf:exclude-result-prefixes="#all">
				<OAI-PMH xmlns=""></OAI-PMH>
			</xforms:instance>

			<!-- XQuery -->
			<xforms:instance id="eXist-xquery">
				<exist:query xmlns="">
					<exist:text></exist:text>
				</exist:query>
			</xforms:instance>

			<xforms:instance id="xquery-result">
				<exist:result></exist:result>
			</xforms:instance>

			<xforms:instance id="xqueries">
				<queries xmlns="">
					<query id="collection-metadata">
						<![CDATA[xquery version "1.0";
						declare namespace ead="urn:isbn:1-931666-22-9";
						let $sequence:= tokenize('%SEQUENCE%', ',')
						let $aggregate:=%AGG%()
						return
						<metadata>
							{
							for $collection-name in $sequence
							let $config:= concat('/db/eaditor/', $collection-name, '/config.xml')
							return 
								<collection id="{$collection-name}">
									<title>{if ($aggregate = true()) then data(doc(concat('/db/eaditor/', $collection-name, '/ead-template.xml'))//ead:publisher) else data(doc($config)/config/title)}</title>
									<description>{data(doc($config)/config/description)}</description>
									<url>{data(doc($config)/config/url)}</url>
								</collection>
							}
						</metadata>]]>
					</query>
				</queries>
			</xforms:instance>

			<!-- Solr instances -->
			<xforms:instance id="addIndex">
				<add xmlns=""></add>
			</xforms:instance>
			<!-- Instance for Solr commit-->
			<xforms:instance id="sendCommit">
				<commit></commit>
			</xforms:instance>

			<!-- download CSV -->
			<xforms:instance id="csv">
				<csv xmlns=""></csv>
			</xforms:instance>

			<xforms:instance id="csv-download">
				<csv xmlns=""></csv>
			</xforms:instance>

			<!-- ************* BINDINGS ************* -->
			<xforms:bind nodeset="instance('config')">
				<xforms:bind nodeset="aggregator" type="xs:boolean"></xforms:bind>
				<xforms:bind id="validate-trigger" nodeset="validate-trigger" type="xs:boolean" readonly=". != true()"></xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('harvesters')">
				<xforms:bind nodeset="harvester">
					<xforms:bind nodeset="@url" required="true()"></xforms:bind>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('harvester-template')">
				<xforms:bind nodeset="@collection" required="true()"></xforms:bind>
				<xforms:bind nodeset="@url" required="true()" type="xs:anyURI"></xforms:bind>
			</xforms:bind>
			
			<xforms:bind nodeset="instance('csv-download')" type="xs:base64Binary"/>

			<!-- **************** DYNAMIC VALIDATION CONTROLS ********************** -->
			<xforms:action ev:event="xxforms-invalid" ev:observer="harvester-template">
				<xforms:setvalue ref="instance('control-instance')/validate-trigger" value="false()"></xforms:setvalue>
			</xforms:action>

			<xforms:action ev:event="xxforms-valid" ev:observer="harvester-template">
				<xforms:setvalue ref="instance('control-instance')/validate-trigger" value="true()"></xforms:setvalue>
			</xforms:action>

			<!-- ************* SUBMISSIONS ************* -->
			<!-- load and save files from eXist -->
			<xforms:submission id="load-config" serialization="none" method="get" action="{instance('exist-config')/url}eaditor/config.xml" replace="instance" instance="config"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:message level="modal" ev:event="xforms-submit-error">Error loading config.</xforms:message>
			</xforms:submission>

			<xforms:submission id="load-harvesters" serialization="none" method="get" action="{instance('exist-config')/url}eaditor/harvesters.xml" replace="instance" instance="harvesters"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:setvalue ref="instance('control-instance')/status" ev:event="xforms-submit-error">No harvesters have been set up yet.</xforms:setvalue>
			</xforms:submission>

			<xforms:submission id="save-harvesters" ref="instance('harvesters')" action="{instance('exist-config')/url}eaditor/harvesters.xml" method="put" replace="none"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error saving harvester XML file.</xforms:message>
			</xforms:submission>

			<xforms:submission id="load-collections" serialization="none" method="get" action="{instance('exist-config')/url}eaditor/collections-list.xml" replace="instance"
				instance="collections-list" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:setvalue ref="instance('control-instance')/error" ev:event="xforms-submit-error">Error loading collections list.</xforms:setvalue>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
						value="replace(replace(instance('xqueries')/query[@id='collection-metadata'], '%SEQUENCE%', string-join(instance('collections-list')/collection/@name, ',')), '%AGG%', instance('config')/aggregator)"></xforms:setvalue>
					<xforms:send submission="xquery-db"></xforms:send>
				</xforms:action>
			</xforms:submission>

			<!-- interacting with OAI-PMH -->
			<xforms:submission id="query-oai" serialization="none" method="get" action="{instance('harvester-template')/@url}" replace="instance" instance="oai-pmh">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/error">The URL does to yield a parseable response (not OAI-PMH).</xforms:setvalue>
				</xforms:action>
				<xforms:action ev:event="xforms-submit-done">
					<!-- clear error message -->
					<xforms:setvalue ref="instance('control-instance')/error"></xforms:setvalue>

					<!-- evaluate namespace of returned XML document -->
					<xforms:action if="namespace-uri(instance('oai-pmh')) = 'http://www.openarchives.org/OAI/2.0/'">
						<!-- insert harvester into master list and save it -->
						<xforms:insert context="instance('harvesters')" nodeset="./child::node()[last()]" origin="instance('harvester-template')"></xforms:insert>
						<xforms:setvalue ref="instance('control-instance')/collection-name" value="instance('harvester-template')/@collection"></xforms:setvalue>
						<!-- clear template -->
						<xforms:setvalue ref="instance('harvester-template')/@url"></xforms:setvalue>
						<xforms:setvalue ref="instance('harvester-template')/@collection"></xforms:setvalue>

						<xforms:send submission="save-harvesters"></xforms:send>
						<xforms:action if="xforms-submit-done">
							<xforms:send submission="parse-oai"></xforms:send>
							<xforms:setvalue ref="instance('control-instance')/status">Extracting EAD document list.</xforms:setvalue>
						</xforms:action>
					</xforms:action>
					<xforms:setvalue ref="instance('control-instance')/error" if="not(namespace-uri(instance('oai-pmh')) = 'http://www.openarchives.org/OAI/2.0/')">The XML response does not belong to
						the OAI-PMH namespace.</xforms:setvalue>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="parse-oai" serialization="none" method="get" action="/eaditor/admin/harvest/extract?agencycode={instance('control-instance')/collection-name}" replace="instance"
				instance="files">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/error">Parse error with OAI-PMH (malformed XML, bad resumption token?)</xforms:setvalue>
				</xforms:action>
				<xforms:toggle case="validation-interface" ev:event="xforms-submit-done"></xforms:toggle>
			</xforms:submission>
			
			<xforms:submission id="parse-github" serialization="none" method="get" action="/eaditor/admin/harvest/extract?agencycode={instance('control-instance')/collection-name}" replace="instance"
				instance="files">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/error">Error parsing the processed Github repository on local filesystem.</xforms:setvalue>
				</xforms:action>
				<xforms:toggle case="validation-interface" ev:event="xforms-submit-done"></xforms:toggle>
			</xforms:submission>
			
			<!-- parse the directory listing -->
			<xforms:submission id="parse-directory" serialization="none" method="get" action="/eaditor/admin/harvest/extract?agencycode={instance('control-instance')/collection-name}" replace="instance"
				instance="files">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/error">Parse error with export feed (potential PHP script error)</xforms:setvalue>
					<xforms:delete nodeset="instance('harvesters')/harvester[last()]"/>
					<xforms:send submission="save-harvesters"></xforms:send>
				</xforms:action>
				<xforms:action ev:event="xforms-submit-done">
					<!-- if the XML responds with an error message, then display error and delete the harvester -->
					<xforms:action  if="instance('files')/error">
						<xforms:setvalue ref="instance('control-instance')/error">Unable to parse the directory listing at the URL provided</xforms:setvalue>
						<xforms:delete nodeset="instance('harvesters')/harvester[last()]"/>
						<xforms:send submission="save-harvesters"></xforms:send>
					</xforms:action>
					<!-- if an XML response yields files, then save the harvester -->
					<xforms:action if="count(instance('files')/file) &gt; 0">
						<!-- clear template -->
						<xforms:setvalue ref="instance('harvester-template')/@url"></xforms:setvalue>
						<xforms:setvalue ref="instance('harvester-template')/@collection"></xforms:setvalue>
						<xforms:toggle case="validation-interface"/>
					</xforms:action>
					
				</xforms:action>
				
			</xforms:submission>

			<!-- Load / Save EAD files -->
			<xforms:submission id="load-ead-template" serialization="none" method="get" action="{instance('exist-config')/url}eaditor/{instance('control-instance')/collection-name}/ead-template.xml"
				replace="instance" instance="ead-template" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}"> </xforms:submission>

			<xforms:submission id="load-ead" serialization="none" method="get" action="{instance('control-instance')/ead-file}" replace="instance" instance="old-ead">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
						origin="xforms:element('error', 'Unable to load file. Probably malformed XML')"></xforms:insert>
				</xforms:action>
				<xforms:action ev:event="xforms-submit-done">
					<!-- perform validation checks 
					1. root element: ead
					2. whether eadid exists
					3. check titleproper
					4. publicationstmt/publisher
					5. profiledesc
					6. archdesc/did/unittitle
					7. archdesc/did/origination-->

					<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
						origin="xforms:element('error', 'Root node is not &#x022;ead&#x022;')" if="not(instance('old-ead')/local-name()='ead')"></xforms:insert>

					<!-- only proceed with other validations if the root node is 'ead' -->
					<xforms:action if="instance('old-ead')/local-name()='ead'">
						<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
							origin="xforms:element('error', 'No eadid')" if="not(string(instance('old-ead')//*:eadid))"></xforms:insert>
						<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
							origin="xforms:element('error', 'No titleproper')" if="not(string(instance('old-ead')/*:eadheader/*:filedesc/*:titlestmt/*:titleproper))"></xforms:insert>
						<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
							origin="xforms:element('error', 'No publisher')" if="not(string(instance('old-ead')/*:eadheader/*:filedesc/*:publicationstmt/*:publisher))"></xforms:insert>
						<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
							origin="xforms:element('error', 'No profiledesc')" if="not(instance('old-ead')/*:eadheader/*:profiledesc)"></xforms:insert>
						<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
							origin="xforms:element('error', 'No archdesc/did/unittitle')" if="not(string(instance('old-ead')/*:archdesc/*:did/*:unittitle))"></xforms:insert>
						<xforms:insert context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
							origin="xforms:element('error', 'No archdesc/did/origination')" if="not(instance('old-ead')/*:archdesc/*:did/*:origination)"></xforms:insert>
					</xforms:action>

					<!-- if no errors are found, apply the XSLT transformation for data normalization and post to eXist -->
					<xforms:action if="count(instance('files')/file[position() = instance('control-instance')/ead-file-pos]/error) = 0">
						<!-- apply normalization tranformation -->
						<xforms:insert nodeset="instance('new-ead')"
							origin="xxf:call-xpl('oxf:/apps/eaditor/xpl/xforms/harvest/normalize-ead.xpl', ('data', 'template'), (instance('old-ead'), instance('ead-template')), 'data')"></xforms:insert>
						<xforms:send submission="save-ead"></xforms:send>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="save-ead" ref="instance('new-ead')"
				action="{instance('exist-config')/url}eaditor/{instance('control-instance')/collection-name}/guides/{instance('new-ead')//ead:eadid}.xml" method="put" replace="none"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to save XML file to eXist.</xforms:message>
				<!-- if the EAD record successfully saves, then publish to Solr -->
				<xforms:action ev:event="xforms-submit-done">
					<xforms:send submission="doc-to-solr"></xforms:send>
					<!-- update SPARQL -->
					<!--<xforms:action if="string(instance('config')/sparql/update) and string(instance('config')/sparql/store)">
						<xforms:var name="uri"
							select="if (instance('config')/ark/@enabled='true') then concat(instance('config')/url, 'ark:/', instance('config')/ark/naan, '/', instance('new-ead')/ead:eadheader/ead:eadid) else concat(instance('config')/url, 'id/', instance('new-ead')/ead:eadheader/ead:eadid)"></xforms:var>
						<xforms:setvalue ref="instance('sparqlUpdate')" value="replace(instance('sparqlUpdate-template'), 'URI', $uri)"></xforms:setvalue>
						<xforms:send submission="delete-graph"></xforms:send>
					</xforms:action>-->
				</xforms:action>
			</xforms:submission>

			<!-- ************** SOLR ***************** -->
			<!-- access service to read in pre-transformed solr doc -->
			<xforms:submission id="doc-to-solr" method="get" replace="instance" instance="addIndex" serialization="none"
				resource="/eaditor/{instance('control-instance')/collection-name}/id/{instance('new-ead')//ead:eadid}.solr">
				<xforms:insert ev:event="xforms-submit-error" context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
					origin="xforms:element('warning', 'Unable to transform into Solr document.')"></xforms:insert>
				<xforms:send ev:event="xforms-submit-done" submission="publish-submission"></xforms:send>
			</xforms:submission>

			<!-- post instance to Solr -->
			<xforms:submission id="publish-submission" action="{instance('config')/solr_published}update" ref="instance('addIndex')" instance="addIndex" replace="instance" method="post">
				<xforms:insert ev:event="xforms-submit-error" context="instance('files')/file[position() = instance('control-instance')/ead-file-pos]" nodeset="./child::node()[last()]"
					origin="xforms:element('warning', 'Unable to post to Solr. Add doc invalid to schema.xml')"></xforms:insert>
			</xforms:submission>

			<!-- send commit -->
			<xforms:submission id="submit-commit" action="{instance('config')/solr_published}update" ref="instance('sendCommit')" instance="sendCommit" replace="none" method="post"></xforms:submission>

			<!-- XQuery -->
			<xforms:submission id="xquery-db" ref="instance('eXist-xquery')" resource="{instance('exist-config')/url}eaditor" method="post" replace="instance" instance="xquery-result"
				xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:setvalue ref="instance('control-instance')/error" ev:event="xforms-submit-error">Error querying eXist database.</xforms:setvalue>
			</xforms:submission>

			<!-- ********** XFORMS-MODEL-CONSTRUCT-DONE ********** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<xforms:action if="not(xxf:is-user-in-role('eaditor-admin'))">
					<xforms:setvalue ref="instance('control-instance')/interface">unauthorized-user</xforms:setvalue>
				</xforms:action>
				<xforms:action if="xxf:is-user-in-role('eaditor-admin')">
					<xforms:setvalue ref="instance('control-instance')/interface">harvester</xforms:setvalue>
					<xforms:send submission="load-config"></xforms:send>
					<xforms:send submission="load-collections"></xforms:send>
					<xforms:send submission="load-harvesters"></xforms:send>
				</xforms:action>
			</xforms:action>

			<!-- ************************* XFORMS-READY ************************** -->
			<!-- set case on xforms-ready -->
			<xforms:action ev:event="xforms-ready">
				<xforms:toggle case="{instance('control-instance')/interface}"></xforms:toggle>
			</xforms:action>
		</xforms:model>
	</head>

	<body>
		<xforms:var name="display_path">../</xforms:var>
		<xi:include href="header.xml"></xi:include>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<xforms:group ref="instance('control-instance')/error/text()">
						<div class="alert-danger alert alert-box">
							<span class="glyphicon glyphicon-info-sign"></span>
							<xforms:output ref="instance('control-instance')/error"></xforms:output>
						</div>
					</xforms:group>
					<xforms:group ref="instance('control-instance')/status/text()">
						<div class="alert-warning alert alert-box">
							<span class="glyphicon glyphicon-info-sign"></span>
							<xforms:output ref="instance('control-instance')/status"></xforms:output>
						</div>
					</xforms:group>
					<p>
						<a href="{$display_path}"><span class="glyphicon glyphicon-arrow-left"/> Return to Admin</a>
					</p>
					<h1>EAD Harvester</h1>
					<xforms:switch>
						<xforms:case id="unauthorized-user">
							<p>The user is not authorized to access the EAD harvester. Only users in the eaditor-admin group can access this interface.</p>
						</xforms:case>
						<xforms:case id="harvester">
							<xforms:switch>
								<xforms:case id="harvester-list">
									<div>
										<xforms:trigger appearance="minimal">
											<xforms:label><span class="glyphicon glyphicon-plus"></span>Add harvester</xforms:label>
											<xforms:toggle case="add-harvester" ev:event="DOMActivate"></xforms:toggle>
										</xforms:trigger>
									</div>
									<xforms:group ref="instance('harvesters')">
										<xforms:group ref=".[count(harvester) &gt; 0]">
											<table class="table">
												<thead>
													<tr>
														<th>Code</th>
														<th>Name</th>
														<th>Type</th>
														<th>URL</th>
														<th>Last Harvest</th>
														<th>Actions</th>
													</tr>
												</thead>
												<tbody>
													<xforms:repeat nodeset="harvester">
														<xforms:var name="id" select="@collection"></xforms:var>
														<tr>
															<td><xforms:output ref="$id"></xforms:output></td>
															<td><xforms:output ref="instance('xquery-result')//collection[@id=$id]/title"></xforms:output></td>
															<td><xforms:output ref="@type"></xforms:output></td>
															<td><xforms:output ref="@url"></xforms:output></td>
															<td><xforms:output value="if (string-length(@date) &gt; 0) then @date else 'Never harvested'"></xforms:output></td>
															<td>
																<xforms:trigger appearance="minimal">
																	<xforms:label><span class="glyphicon glyphicon-refresh"></span></xforms:label>
																	<xforms:hint>Re-harvest from last date</xforms:hint>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:setvalue ref="instance('control-instance')/collection-name" value="$id"></xforms:setvalue>
																		
																		<!-- conditionals for pipeline call, depending on the harvest @type -->
																		<xforms:send submission="parse-oai" if="@type='oai'"></xforms:send>
																		<xforms:send submission="parse-github" if="@type='github'"></xforms:send>
																	</xforms:action>
																</xforms:trigger>
																<xforms:trigger appearance="minimal">
																	<xforms:label><span class="glyphicon glyphicon-remove"></span></xforms:label>
																	<xforms:hint>Delete harvester</xforms:hint>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:delete nodeset="."/>
																		<xforms:send submission="save-harvesters"/>																	
																	</xforms:action>
																</xforms:trigger>
															</td>
														</tr>
													</xforms:repeat>
												</tbody>
											</table>
										</xforms:group>
										<xforms:group ref=".[count(harvester) = 0]">
											<p>There are no harvesters configured in EADitor.<xforms:trigger appearance="minimal"><xforms:label><span class="glyphicon glyphicon-plus"></span>Add
														one.</xforms:label>
													<xforms:toggle case="add-harvester" ev:event="DOMActivate"></xforms:toggle>
												</xforms:trigger></p>
										</xforms:group>
									</xforms:group>
								</xforms:case>
								<xforms:case id="validation-interface">
									<h3>Validate and Import Files</h3>
									<xforms:group ref="instance('files')">
										<xforms:group ref=".[count(file) = 0]">
											<p>No XML files have been returned by the access point.</p>
										</xforms:group>
										<xforms:group ref=".[count(file) &gt; 0]">
											<p><xforms:output value="count(file)"></xforms:output> file URLs have been returned by the access point.</p>
											<xforms:trigger>
												<xforms:label>Begin Process</xforms:label>
												<xforms:action ev:event="DOMActivate">
													<!-- load template to gather standardized agency code, publisher, etc. -->
													<xforms:send submission="load-ead-template"></xforms:send>
													<!-- iterate through all the XML files in the list and perform validation. if validation passes, then process the file and publish to eXist. otherwise report errors -->
													<xforms:action xxf:iterate="instance('files')//file">
														<xforms:var name="position" select="position()"></xforms:var>
														<xforms:var name="url" select="context()/url"></xforms:var>
														<xforms:setvalue ref="instance('control-instance')/ead-file" value="$url"></xforms:setvalue>
														<xforms:setvalue ref="instance('control-instance')/ead-file-pos" value="$position"></xforms:setvalue>
														<!-- load EAD file, which triggers validation and publication process -->
														<xforms:send submission="load-ead"></xforms:send>
													</xforms:action>
													<!-- after the iteration is complete, post the commit to Solr and display the validation results -->
													<xforms:send submission="submit-commit"></xforms:send>
													
													<!-- update the harvester file with the current modification date -->
													<xforms:setvalue ref="instance('harvesters')/harvester[@collection = instance('control-instance')/collection-name]/@date" value="substring(string(current-date()), 1, 10)"></xforms:setvalue>
													<xforms:send submission="save-harvesters"></xforms:send>
													
													<!-- generate the CSV response -->
													<xforms:insert nodeset="instance('csv')"
														origin="xxf:call-xpl('oxf:/apps/eaditor/xpl/xforms/harvest/files-to-csv.xpl', 'data', instance('files'), 'data')"></xforms:insert>
													<xforms:setvalue ref="instance('csv-download')" value="saxon:string-to-base64Binary(saxon:serialize(instance('csv'), 'text'), 'UTF-8')"></xforms:setvalue>
													<xforms:toggle case="validation-complete"></xforms:toggle>
												</xforms:action>
											</xforms:trigger>
										</xforms:group>
									</xforms:group>
								</xforms:case>
								<xforms:case id="validation-complete">
									<h3>Harvest Results</h3>
									<xforms:group ref="instance('files')">
										<!-- if there are no errors, simply display a success message -->
										<xforms:group ref=".[count(file[error]) = 0 and count(file[warning]) = 0]">
											<div class="alert-success alert alert-box">
												<span class="glyphicon glyphicon-info-sign"></span> Files successfully imported into EADitor.</div>
											<div>												
												<xforms:output ref="instance('csv-download')" appearance="xxf:download">
													<xforms:label>Download CSV</xforms:label>
													<xforms:mediatype>text/csv</xforms:mediatype>
													<xforms:filename ref="concat(instance('control-instance')/collection-name, '.csv')"></xforms:filename>													
												</xforms:output>
											</div>
										</xforms:group>
										<!-- otherwise display results -->
										<xforms:group ref=".[count(file[error]) &gt; 0 or count(file[warning]) &gt; 0]">
											<div class="alert-danger alert alert-box">
												<span class="glyphicon glyphicon-info-sign"></span> Validation errors or Solr indexing warnings have been reported.</div>
											<div>
												<xforms:output value="count(file[error])">
													<xforms:label>Errors</xforms:label>
												</xforms:output>
											</div>
											<div>
												<xforms:output value="count(file[warning])">
													<xforms:label>Warnings</xforms:label>
												</xforms:output>
											</div>
											<div>												
												<xforms:output ref="instance('csv-download')" appearance="xxf:download">
													<xforms:label>Download CSV</xforms:label>
													<xforms:mediatype>text/csv</xforms:mediatype>
													<xforms:filename ref="concat(instance('control-instance')/collection-name, '.csv')"></xforms:filename>													
												</xforms:output>
											</div>
											<table class="table">
												<thead>
													<tr>
														<th>Filename</th>
														<th>Errors</th>
														<th>Warnings</th>
													</tr>
												</thead>
												<tbody>
													<xforms:repeat nodeset="file">
														<tr>
															<td>
																<xforms:output ref="url"></xforms:output>
															</td>
															<td>
																<xforms:output value="string-join(error, ', ')"></xforms:output>
															</td>
															<td>
																<xforms:output value="string-join(warning, ', ')"></xforms:output>
															</td>
														</tr>
													</xforms:repeat>
												</tbody>
											</table>
										</xforms:group>
									</xforms:group>
								</xforms:case>
								<xforms:case id="add-harvester">
									<h3>Add Harvester</h3>
									<xforms:group ref="instance('harvester-template')">
										<div>
											<xforms:select1 ref="@collection">
												<xforms:label>Agency</xforms:label>
												<xforms:item>
													<xforms:label>Select Agency...</xforms:label>
													<xforms:value></xforms:value>
												</xforms:item>
												<xforms:itemset nodeset="instance('xquery-result')//collection">
													<xforms:label ref="concat(title, ' (', @id, ')')"></xforms:label>
													<xforms:value ref="@id"></xforms:value>
												</xforms:itemset>
												<xforms:alert>Required</xforms:alert>
											</xforms:select1>
										</div>
										<div>
											<xforms:select1 ref="@type" appearance="full">
												<xforms:label>Type</xforms:label>
												<xforms:item>
													<xforms:label>OAI-PMH</xforms:label>
													<xforms:value>oai</xforms:value>
												</xforms:item>
												<xforms:item>
													<xforms:label>Directory List</xforms:label>
													<xforms:value>directory</xforms:value>
												</xforms:item>
											</xforms:select1>
										</div>
										<div>
											<xforms:input ref="@url">
												<xforms:label>URL</xforms:label>
												<xforms:alert>Invalid URL</xforms:alert>
												<xforms:hint value="concat('Input URL for ', if (../@type='oai') then 'OAI-PMH set' else 'directory listing')"></xforms:hint>
											</xforms:input>
										</div>
										<xforms:trigger>
											<xforms:label>Validate</xforms:label>
											<xforms:action ev:event="DOMActivate">
												<!-- submit query depending on feed type-->
												<xforms:send submission="query-oai" if="instance('harvester-template')/@type='oai'"></xforms:send>
												<xforms:action if="instance('harvester-template')/@type='directory'">
													<!-- insert harvester into master list and save it -->
													<xforms:insert context="instance('harvesters')" nodeset="./child::node()[last()]" origin="instance('harvester-template')"></xforms:insert>
													<xforms:setvalue ref="instance('control-instance')/collection-name" value="instance('harvester-template')/@collection"></xforms:setvalue>
													
													<xforms:send submission="save-harvesters"></xforms:send>													
													<xforms:send submission="parse-directory" ev:event="xforms-submit-done"></xforms:send>
												</xforms:action>
											</xforms:action>
										</xforms:trigger>
									</xforms:group>
								</xforms:case>
							</xforms:switch>
						</xforms:case>
					</xforms:switch>
					<fr:xforms-inspector></fr:xforms-inspector>
				</div>
			</div>
		</div>
	</body>
</html>
