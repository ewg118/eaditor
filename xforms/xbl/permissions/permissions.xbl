<?xml version="1.0" encoding="UTF-8"?>
<!--
	Based on permissions example by delcyon on orbeon.com, heavily modified by Ethan Gruber for EADitor
	
	Installation Location:
	oxf:/xbl/eaditor/permissions/permissions.xbl
-->
<xbl:xbl xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:xbl="http://www.w3.org/ns/xbl"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xxbl="http://orbeon.org/oxf/xml/xbl" xmlns:dlcn="http://www.delcyon.com/xbl" xmlns:oxf="http://www.orbeon.com/oxf/processors"
	xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:eaditor="https://github.com/ewg118/eaditor" xmlns:ead="urn:isbn:1-931666-22-9" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:fr="http://orbeon.org/oxf/xml/form-runner">

	<xbl:binding element="eaditor|permissions">

		<xbl:resources>
			<xbl:style src="/eaditor/xforms/xbl/permissions/permissions.css"/>
		</xbl:resources>

		<xbl:template xxbl:transform="oxf:xslt">
			<xsl:transform version="2.0">
				<xsl:template match="eaditor:permissions">
					<xforms:group xbl:attr="ref" xxbl:scope="outer">
						<!-- Start copying the variables over that we need -->

						<xforms:var name="data" xxbl:scope="inner">
							<xxf:sequence select="." xxbl:scope="outer"/>
						</xforms:var>

						<!-- end external variable copying -->

						<!-- START MAIN GROUP-->
						<xforms:group xxbl:scope="inner">
							<xforms:action ev:event="xforms-enabled" ev:target="#observer">
								<xforms:action xxf:iterate="$data//ead:c" ev:event="xforms-enabled">
									<xforms:var name="id" select="@id"/>
									<xforms:var name="audience" select="@audience"/>
									<xforms:setvalue ref="instance('c-template')/@id" value="$id"/>
									<xforms:setvalue ref="instance('c-template')/@audience" value="if(string($audience)) then $audience else ''"/>
									<xforms:insert origin="instance('c-template')" context="instance('components')" nodeset="./child::node()[last()]" if="count(instance('components')//ead:c[@id=$id]) = 0"
									/>
								</xforms:action>						
							</xforms:action>
							
							<xforms:group ref="$data">
								<xsl:choose>
									<xsl:when test="exists(@depth)">
										<xsl:call-template name="node">
											<xsl:with-param name="depth" select="@depth"/>
											<xsl:with-param name="current">1</xsl:with-param>
										</xsl:call-template>
									</xsl:when>
									<xsl:otherwise>
										<xsl:call-template name="node">
											<xsl:with-param name="depth">5</xsl:with-param>
											<xsl:with-param name="current">1</xsl:with-param>
										</xsl:call-template>
									</xsl:otherwise>
								</xsl:choose>
							</xforms:group>
							<xforms:model id="permissions-model">
								<xforms:instance id="components">
									<components xmlns="urn:isbn:1-931666-22-9"/>
								</xforms:instance>
								<xforms:instance id="c-template">
									<c id="" audience="" xmlns="urn:isbn:1-931666-22-9"/>
								</xforms:instance>
							</xforms:model>
							<fr:xforms-inspector/>
						</xforms:group>
						<!-- END MAIN GROUP -->
					</xforms:group>
				</xsl:template>

				<xsl:template name="node">
					<xsl:param name="depth" as="xs:integer"/>
					<xsl:param name="current" as="xs:integer"/>
					<ul>
						<xsl:if test="$current > 1">
							<h5>
								<xforms:output value="concat(@level, ': ', ead:did/ead:unittitle)"/>
								<xforms:group ref=".[string-length(ead:did/ead:unitdate) &gt; 0]">
									<xforms:output value="concat(' (', ead:did/ead:unitdate, ')')"/>
								</xforms:group>
							</h5>
							<xforms:select1 ref="instance('components')/ead:c[@id=$id]/@audience">
								<!--<xforms:label>Audience</xforms:label>-->
								<xforms:item>
									<xforms:label>Select below...</xforms:label>
									<xforms:value/>
								</xforms:item>
								<xforms:item>
									<xforms:label>External</xforms:label>
									<xforms:value>external</xforms:value>
								</xforms:item>
								<xforms:item>
									<xforms:label>Internal</xforms:label>
									<xforms:value>internal</xforms:value>
								</xforms:item>
								<xforms:action ev:event="xforms-value-changed">
									<xforms:insert if="not(normalize-space(context()) = '')" context="$data//ead:c[@id=$id]" origin="xforms:attribute('audience',
										instance('components')/ead:c[@id=$id]/@audience)"/>
									<xforms:delete if="normalize-space(context()) = ''" context="$data//ead:c[@id=$id]/@audience"/>
								</xforms:action>
							</xforms:select1>
						</xsl:if>
						<!-- Repeat over each child node of the root node -->
						<xsl:if test="$depth > 1">
							<xforms:repeat nodeset="ead:c">
								<xforms:var name="id" select="@id"/>
								<xforms:var name="audience" select="if (@audience='external') then 'bg-success' else if (@audience='internal') then 'bg-danger' else ''"/>
								<li>
									<div class="component {'{$audience}'}">
										<!-- if this element has children recurse into it -->
										<xsl:call-template name="node">
											<xsl:with-param name="current" select="$current + 1"/>
											<xsl:with-param name="depth" select="$depth - 1"/>
										</xsl:call-template>
									</div>
								</li>
							</xforms:repeat>
						</xsl:if>
					</ul>
				</xsl:template>
			</xsl:transform>
		</xbl:template>
	</xbl:binding>
</xbl:xbl>
