<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (C) 2010 Ethan Gruber
    EADitor: https://github.com/ewg118/eaditor
    Apache License 2.0: https://github.com/ewg118/eaditor    
-->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ev="http://www.w3.org/2001/xml-events"
	xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:ead="urn:isbn:1-931666-22-9"
	xmlns:atom="http://www.w3.org/2005/Atom" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<head>
		<title>EADitor: Edit Settings</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="stylesheet" href="/config/theme/examples.css" type="text/css" media="all" />
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" />
		<script type="text/javascript" src="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/apps/eaditor/xforms/css/xforms.css" />

		<xforms:model xmlns="urn:isbn:1-931666-22-9">
			<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
				<xsd:simpleType name="emailAddress">
					<xsd:restriction base="xsd:string">
						<xsd:pattern value="[^@]+@[^\.]+\..+"></xsd:pattern>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:schema>


			<!-- exist URL is stored in an XML file -->
			<xforms:instance id="exist-config">
				<xi:include href="../exist-config.xml"></xi:include>
			</xforms:instance>

			<xforms:instance id="config" xxf:exclude-result-prefixes="#all">
				<config xmlns=""></config>
			</xforms:instance>

			<xforms:instance id="control-instance" xxf:exclude-result-prefixes="#all">
				<controls xmlns="">
					<id></id>
					<collection-name></collection-name>
					<status></status>
					<api-key-accepted></api-key-accepted>
					<save-trigger></save-trigger>
					<connect-trigger></connect-trigger>
					<xeac></xeac>
					<xeac-success>false</xeac-success>
					<sparql>
						<update></update>
						<query></query>
						<store></store>
					</sparql>
					<sparql-success>false</sparql-success>
					<sparql-connect>false</sparql-connect>
					<sparql-query-test>SELECT * WHERE {?s ?p ?o} LIMIT 1</sparql-query-test>
				</controls>
			</xforms:instance>

			<!-- authentication -->
			<xforms:instance id="collections-list" xxf:exclude-result-prefixes="#all">
				<collections xmlns=""></collections>
			</xforms:instance>

			<xforms:instance id="dump">
				<dump xmlns=""></dump>
			</xforms:instance>

			<!-- flickr -->
			<xforms:instance id="flickr-response">
				<rsp xmlns=""></rsp>
			</xforms:instance>

			<xforms:instance id="secret-template" xxf:exclude-result-prefixes="#all">
				<flickr_api_secret xmlns=""></flickr_api_secret>
			</xforms:instance>

			<!-- connecting to xEAC -->
			<xforms:instance id="xeac-response">
				<feed xmlns="http://www.w3.org/2005/Atom"></feed>
			</xforms:instance>

			<!-- connecting to a SPARQL endpoint -->
			<xforms:instance id="sparql-response">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"></sparql>
			</xforms:instance>

			<!-- publish records to SPARQL endpoint -->
			<xforms:instance id="solr-response" xxf:exclude-result-prefixes="#all">
				<response></response>
			</xforms:instance>

			<xforms:instance id="rdf" xxf:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"></rdf:RDF>
			</xforms:instance>

			<xforms:instance id="rdf-test" xxf:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
					<rdf:Description rdf:about="http://example.org/">
						<rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Organization"></rdf:type>
					</rdf:Description>
				</rdf:RDF>
			</xforms:instance>

			<xforms:instance id="sparqlUpdate-template">
				<query>
					<![CDATA[DELETE {?s ?p ?o} WHERE { <URI> ?p ?o . ?s ?p ?o . FILTER (?s = <URI>) }]]>
				</query>
			</xforms:instance>

			<xforms:instance id="sparqlUpdate">
				<query></query>
			</xforms:instance>

			<!-- ************* BINDINGS ************* -->
			<xforms:bind nodeset="instance('config')">
				<xforms:bind nodeset="title" required="true()"></xforms:bind>
				<xforms:bind nodeset="description" required="true()"></xforms:bind>
				<xforms:bind nodeset="solr_published" required="true()" as="xs:anyURI"></xforms:bind>
				<xforms:bind nodeset="url" required="true()" as="xs:anyURI"></xforms:bind>
				<xforms:bind nodeset="xeac" as="xs:anyURI"></xforms:bind>
				<xforms:bind nodeset="sparql">
					<xforms:bind nodeset="endpoint" type="xs:boolean"></xforms:bind>
					<xforms:bind nodeset="query" type="xs:anyURI"></xforms:bind>
					<xforms:bind nodeset="store" type="xs:anyURI"></xforms:bind>
					<xforms:bind nodeset="update" type="xs:anyURI"></xforms:bind>
				</xforms:bind>
				<xforms:bind nodeset="ark">
					<xforms:bind nodeset="naan" constraint="string-length(.) = 5 and number(.)" relevant="parent::node()/@enabled = true()" required="parent::node()/@enabled = true()"></xforms:bind>
					<xforms:bind nodeset="@enabled" type="xs:boolean"></xforms:bind>
				</xforms:bind>
				<xforms:bind nodeset="export">
					<xforms:bind nodeset="oai-pmh" type="xs:boolean"></xforms:bind>
					<xforms:bind nodeset="pelagios" type="xs:boolean"></xforms:bind>
				</xforms:bind>
				<xforms:bind nodeset="levels">
					<xforms:bind nodeset="archdesc/@enabled" type="xs:boolean"></xforms:bind>
					<xforms:bind nodeset="level/@enabled" type="xs:boolean"></xforms:bind>
				</xforms:bind>
				<xforms:bind nodeset="publisher" required="true()"></xforms:bind>
				<xforms:bind nodeset="publisher_code" required="../export/oai-pmh = true()" relevant="../export/oai-pmh = true()"></xforms:bind>
				<xforms:bind nodeset="publisher_email" type="emailAddress" required="../export/oai-pmh = true()" relevant="../export/oai-pmh = true()"></xforms:bind>
				<xforms:bind nodeset="containertypes">
					<xforms:bind nodeset="container/@value" required="true()" type="xs:NMTOKEN"></xforms:bind>
					<xforms:bind nodeset="container" required="true()"></xforms:bind>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind nodeset="save-trigger" readonly="instance('control-instance')/api-key-accepted = 'false'"></xforms:bind>
				<xforms:bind nodeset="xeac-success" type="xs:boolean"></xforms:bind>
				<xforms:bind nodeset="sparql-success" type="xs:boolean"></xforms:bind>
				<xforms:bind nodeset="sparql-connect" type="xs:boolean"></xforms:bind>
				<xforms:bind nodeset="sparql">
					<xforms:bind nodeset="query" as="xs:anyURI"></xforms:bind>
					<xforms:bind nodeset="store" as="xs:anyURI"></xforms:bind>
					<xforms:bind nodeset="update" as="xs:anyURI"></xforms:bind>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind id="sparql-connect" nodeset="instance('control-instance')/connect-trigger"
				readonly="string-length(../sparql/query) = 0 or string-length(../sparql/update) = 0 or string-length(../sparql/store) = 0"></xforms:bind>

			<!-- ************* SUBMISSIONS ************* -->
			<xforms:submission id="load-collections" serialization="none" method="get" action="{instance('exist-config')/url}eaditor/collections-list.xml" replace="instance"
				instance="collections-list" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<!-- if the config loads successfully, set the collection names based on authentication -->
				<xforms:action ev:event="xforms-submit-done">
					<xforms:setvalue ref="instance('control-instance')/collection-name"
						value="instance('collections-list')/collection[@role=instance('control-instance')/request-security/role]/@name"></xforms:setvalue>
					<xforms:send submission="load-config"></xforms:send>
				</xforms:action>
				<!-- if the config has not been created (given that the URL in exist-url.xml is correct), create it -->
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to load EADitor collections list.</xforms:message>
			</xforms:submission>

			<xforms:submission id="load-config" serialization="none" method="get" action="{instance('exist-config')/url}eaditor/{instance('control-instance')/collection-name}/config.xml"
				replace="instance" instance="config" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:message level="modal" ev:event="xforms-submit-error">Error loading config.</xforms:message>
			</xforms:submission>

			<xforms:submission id="save-config" ref="instance('config')" action="{instance('exist-config')/url}eaditor/{instance('control-instance')/collection-name}/config.xml" method="put"
				replace="none" xxf:username="{instance('exist-config')/username}" xxf:password="{instance('exist-config')/password}">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error Saving Config.</xforms:message>
				<xforms:setvalue ref="instance('control-instance')/status" ev:event="xforms-submit-done">EADitor configuration saved.</xforms:setvalue>
			</xforms:submission>

			<!-- test for flickr echo -->
			<xforms:submission id="test-for-echo" serialization="none" method="get"
				action="https://api.flickr.com/services/rest/?method=flickr.test.echo&amp;api_key={instance('config')/flickr_api_key}" replace="instance" instance="flickr-response">
				<xforms:message ev:event="xforms-submit-error" level="modal">Error querying flickr. Please check internet connection.</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<!-- set readonly for save button if the api key is a string and failed -->
					<xforms:setvalue ref="instance('control-instance')/api-key-accepted" if="not(instance('flickr-response')/@stat = 'ok') and string-length(instance('config')/flickr_api_key) &gt; 0"
						value="'false'"></xforms:setvalue>

					<!-- activate button if the api key is okay or blank -->
					<xforms:setvalue ref="instance('control-instance')/api-key-accepted" if="instance('flickr-response')/@stat = 'ok' or string-length(instance('config')/flickr_api_key) = 0"
						value="'true'"></xforms:setvalue>
				</xforms:action>
			</xforms:submission>

			<!-- query xeac -->
			<xforms:submission id="query-xeac" serialization="none" method="get" action="{instance('control-instance')/xeac}/feed/" replace="instance" instance="xeac-response">
				<xforms:setvalue ref="instance('control-instance')/xeac-success" ev:event="xforms-submit-error">false</xforms:setvalue>
				<xforms:setvalue ref="instance('control-instance')/xeac-success" ev:event="xforms-submit-done">true</xforms:setvalue>
			</xforms:submission>

			<!-- query SPARQL endpoint -->
			<xforms:submission id="query-sparql" serialization="none" method="get"
				action="{instance('control-instance')/sparql/query}?query={encode-for-uri(instance('control-instance')/sparql-query-test)}" replace="instance" instance="sparql-response">
				<xforms:header>
					<xforms:name>Accept</xforms:name>
					<xforms:value>application/sparql-results+xml</xforms:value>
				</xforms:header>
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
			</xforms:submission>

			<!-- publish all documents which are present in Solr into the RDF triplestore -->
			<xforms:submission id="publish-rdf" serialization="none" method="get" action="{instance('config')/solr_published}select/?q=*:*&amp;rows=10000&amp;start=0&amp;fl=id" replace="instance"
				instance="solr-response">
				<xforms:message ev:event="xforms-submit-error" level="modal">Solr is inaccessible. Please check Solr configuration.</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:action xxf:iterate="instance('solr-response')//doc">
						<xforms:var name="id" select="str[@name='id']"></xforms:var>
						<xforms:setvalue ref="instance('control-instance')/id" value="$id"></xforms:setvalue>
						<xforms:send submission="get-rdf"></xforms:send>
					</xforms:action>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="get-rdf" method="get" replace="instance" instance="rdf" serialization="none"
				resource="/eaditor/{instance('control-instance')/collection-name}/id/{instance('control-instance')/id}.rdf">
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to get RDF/XML serialization.</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<!-- first remove existing graphs -->
					<xforms:action xxf:iterate="instance('rdf')//@rdf:about">
						<xforms:var name="uri" select="."></xforms:var>
						<xforms:setvalue ref="instance('sparqlUpdate')" value="replace(instance('sparqlUpdate-template'), 'URI', $uri)"></xforms:setvalue>
						<xforms:send submission="delete-graph"></xforms:send>
					</xforms:action>
					<!-- then post RDF -->
					<xforms:send submission="post-rdf"></xforms:send>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="post-rdf" action="{instance('control-instance')/sparql/store}?default" ref="instance('rdf')" replace="none" method="post" mediatype="application/rdf+xml">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
					<xforms:message level="modal">Post to endpoint failed.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="delete-graph" action="{instance('control-instance')/sparql/update}" ref="instance('sparqlUpdate')" serialization="text/plain" replace="none" method="post"
				mediatype="application/sparql-update">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
					<xforms:message level="modal">SPARQL update failed.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<!-- ********** XFORMS-MODEL-CONSTRUCT-DONE ********** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<xforms:action if="string(xxf:get-session-attribute('collection-name'))">
					<xforms:setvalue ref="instance('control-instance')/collection-name" value="xxf:get-session-attribute('collection-name')"/>
					<xforms:send submission="load-config"></xforms:send>				
				</xforms:action>
				<xforms:action if="not(string(xxf:get-session-attribute('collection-name')))">
					<xforms:insert context="instance('control-instance')" nodeset="collection-name" position="after"
						origin="xxf:call-xpl('oxf:/apps/eaditor/xpl/get-authentication.xpl', 'dump', instance('dump'), 'data')"></xforms:insert>
					<xforms:send submission="load-collections"></xforms:send>
				</xforms:action>
			</xforms:action>
		</xforms:model>
	</head>

	<body>
		<xforms:var name="display_path">../</xforms:var>
		<xi:include href="header.xml"></xi:include>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<div id="form">
						<xforms:group ref="instance('control-instance')/status/text()">
							<div class="alert-success alert alert-box">
								<span class="glyphicon glyphicon-info-sign"></span>
								<strong>Status:</strong>
								<xforms:output ref="instance('control-instance')/status"></xforms:output>
							</div>
						</xforms:group>
						<p>
							<a href="{$display_path}"><span class="glyphicon glyphicon-arrow-left"/> Return</a>
						</p>
						<div class="submission">
							<xforms:trigger ref="instance('control-instance')/save-trigger" appearance="minimal">
								<xforms:label><span class="glyphicon glyphicon-save"></span>Save</xforms:label>
								<xforms:action ev:event="DOMActivate">
									<!-- then save the config to eXist -->
									<xforms:send submission="save-config"></xforms:send>
								</xforms:action>
							</xforms:trigger>
						</div>
						<h1>EADitor Settings</h1>
						<div>
							<xforms:output ref="instance('config')/@version">
								<xforms:label>Version</xforms:label>
							</xforms:output>
						</div>
						<xforms:group ref="instance('config')">
							<div class="section">
								<h3>Titles and URLs</h3>
								<table class="table">
									<tbody>
										<tr>
											<td>
												<xforms:input ref="title">
													<xforms:label>Title</xforms:label>
													<xforms:alert>Required</xforms:alert>
												</xforms:input>
											</td>
											<td>The title of the site to be displayed in all web page titles and citations in PDF files.</td>
										</tr>
										<tr>
											<td>
												<xforms:textarea ref="description">
													<xforms:label>Description</xforms:label>
													<xforms:alert>Required.</xforms:alert>
												</xforms:textarea>
											</td>
											<td>This is the description of the archive or consortium. It is required for data exports.</td>
										</tr>
										<tr>
											<td>
												<xforms:input ref="publisher">
													<xforms:label>Publisher</xforms:label>
													<xforms:alert>Required if Pelagios or OAI-PMH export are enabled.</xforms:alert>
												</xforms:input>
											</td>
											<td>Publisher (individual institution or consortium) responsible for publishing content.</td>
										</tr>
										<tr>
											<td>
												<xforms:input ref="url">
													<xforms:label>URL</xforms:label>
													<xforms:alert>Required</xforms:alert>
												</xforms:input>
											</td>
											<td>Public URL of the site. This is used for forming links to the XML and HTML versions of finding aids, should the public and private aspects of EADitor be
												contained on different servers.</td>
										</tr>
										<tr>
											<td>
												<xforms:output ref="xeac">
													<xforms:label>xEAC URL</xforms:label>
												</xforms:output>
												<xforms:trigger>
													<xforms:label>Connect</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('control-instance')/xeac" value="instance('config')/xeac"></xforms:setvalue>
														<xxf:show dialog="xeac-dialog"></xxf:show>
													</xforms:action>
												</xforms:trigger>
												<xforms:group ref=".[string(xeac)]">
													<xforms:trigger>
														<xforms:label>Clear</xforms:label>
														<xforms:action ev:event="DOMActivate">
															<xforms:setvalue ref="instance('control-instance')/xeac"></xforms:setvalue>
															<xforms:setvalue ref="instance('control-instance')/xeac-success">false</xforms:setvalue>
															<xforms:setvalue ref="instance('config')/xeac"></xforms:setvalue>
														</xforms:action>
													</xforms:trigger>
												</xforms:group>
											</td>
											<td>Home page for a xEAC installation for linking EADitor to CPF authority records. The Atom feed URL will be programmatically ascertained.</td>
										</tr>
									</tbody>
								</table>
							</div>
							<xforms:group ref="sparql">
								<div class="section">
									<h3>SPARQL</h3>
									<div>
										<xforms:group ref=".[not(string(query) and string(store) and string(update))]">
											<xforms:trigger>
												<xforms:label>Connect</xforms:label>
												<xforms:action ev:event="DOMActivate">
													<xxf:show dialog="sparql-dialog"></xxf:show>
												</xforms:action>
											</xforms:trigger>
										</xforms:group>
										<xforms:group ref=".[string(query) and string(store) and string(update)]">
											<xforms:trigger>
												<xforms:label>Clear</xforms:label>
												<xforms:action ev:event="DOMActivate">
													<xforms:setvalue ref="instance('control-instance')/sparql/query"></xforms:setvalue>
													<xforms:setvalue ref="instance('control-instance')/sparql/update"></xforms:setvalue>
													<xforms:setvalue ref="instance('control-instance')/sparql/store"></xforms:setvalue>
													<xforms:setvalue ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
													<xforms:setvalue ref="update"></xforms:setvalue>
													<xforms:setvalue ref="query"></xforms:setvalue>
													<xforms:setvalue ref="store"></xforms:setvalue>
													<xforms:setvalue ref="endpoint">false</xforms:setvalue>
												</xforms:action>
											</xforms:trigger>
										</xforms:group>
									</div>
									<p>Connect EADitor to a SPARQL endpoint for more widespread dissemination and querying.</p>
									<xforms:group ref=".[string(query) and string(update) and string(store)]">
										<div>
											<xforms:input ref="endpoint">
												<xforms:label>Expose Endpoint</xforms:label>
												<xforms:alert>Invalid</xforms:alert>
											</xforms:input>
										</div>
										<div>
											<xforms:output ref="query">
												<xforms:label>Query Service</xforms:label>
											</xforms:output>
										</div>
										<div>
											<xforms:output ref="store">
												<xforms:label>Graph Store</xforms:label>
											</xforms:output>
										</div>
										<div>
											<xforms:output ref="update">
												<xforms:label>Update Service</xforms:label>
											</xforms:output>
										</div>
									</xforms:group>
								</div>
							</xforms:group>
							<div class="section">
								<h3>ARK</h3>
								<p>The Name Assigning Authority Number (NAAN) may be inputted here and enabled to activate the Archival Resource Key (ARK)-compliant URI: <xforms:output
										value="concat(url, 'ark:/', if(string-length(ark/naan) &gt; 0) then ark/naan else '{NAAN}', '/{recordid}')"></xforms:output></p>
								<div>
									<xforms:input ref="ark/@enabled">
										<xforms:label>Enabled</xforms:label>
										<xforms:action ev:event="xforms-value-changed" if=". = true()">
											<xforms:insert context="parent::node()" origin="xforms:element('naan')" if="not(child::naan)"/>
										</xforms:action>
									</xforms:input>
								</div>
								<div>
									<xforms:input ref="ark/naan">
										<xforms:label>NAAN</xforms:label>
										<xforms:alert>Must be a 5-digit ARK number.</xforms:alert>
									</xforms:input>
								</div>
							</div>
							<div class="section">
								<h3>Export</h3>
								<div class="subsection">
									<h4>OAI-PMH</h4>
									<p>Activate OAI-PMH to enable a link on the index page. The feed validates to OAI protocal at the YYYY-MM-DD granularity. <b>Important: </b> Validation only passes
										if EADitor is run on an external server (i.e., not localhost) which uses Apache proxying to make the :8080 Tomcat port. The OAI unique identifier is derived
										from the URL on this settings page.</p>
									<div>
										<xforms:input ref="export/oai-pmh">
											<xforms:label>Enabled</xforms:label>
											<xforms:action ev:event="xforms-value-changed" if=". = true()">
												<xforms:insert context="ancestor::config" origin="xforms:element('publisher_code')" if="not(child::publisher_code)"/>
												<xforms:insert context="ancestor::config" origin="xforms:element('publisher_email')" if="not(child::publisher_email)"/>
											</xforms:action>
										</xforms:input>
									</div>
									<div>
										<xforms:input ref="publisher_code">
											<xforms:label>Publisher Code</xforms:label>
											<xforms:alert>Required if OAI-PMH export is enabled.</xforms:alert>
											<xforms:hint>Publisher code used for OAI-PMH export.</xforms:hint>
										</xforms:input>
									</div>
									<div>
										<xforms:input ref="publisher_email">
											<xforms:label>Publisher Email</xforms:label>
											<xforms:alert>Required if OAI-PMH export is enabled.</xforms:alert>
											<xforms:hint>Publisher email used for OAI-PMH export.</xforms:hint>
										</xforms:input>
									</div>
								</div>
								<div class="subsection">
									<h4>Pelagios</h4>
									<p>This activates the link to the Pelagios VOiD dataset on the EADitor front page. The content of the data dump will only contain RDF documents for objects which
										have been tied to Pleiades IDs.</p>
									<div>
										<xforms:input ref="export/pelagios">
											<xforms:label>Enabled</xforms:label>
										</xforms:input>
									</div>
									<div>
										<xforms:input ref="description">
											<xforms:label>Description</xforms:label>
											<xforms:alert>Required of Pelagios export is enabled.</xforms:alert>
										</xforms:input>
										<p>This is the description of the VOiD dataset exported for Pelagios.</p>
									</div>
								</div>
							</div>
							<div class="section">
								<h3>Publication Options</h3>
								<p>Individual components may be published as atomized Solr documents for more relevant query results and component-level RDF export.</p>
								<xforms:group ref="levels">
									<div>
										<xforms:input ref="archdesc/@enabled">
											<xforms:label>Finding Aid</xforms:label>
										</xforms:input>
									</div>
									<h4>Components</h4>
									<xforms:repeat nodeset="level">
										<xforms:var name="label" select="."></xforms:var>
										<div>
											<xforms:input ref="@enabled">
												<xforms:label ref="concat('Level: ', $label)"></xforms:label>
											</xforms:input>
										</div>
									</xforms:repeat>
								</xforms:group>
							</div>
							<div class="section">
								<h3>API Keys</h3>
								<xforms:group ref=".[instance('flickr-response')/@stat='fail' and string-length(flickr_api_key) &gt; 0]">
									<div class="ui-widget">
										<div class="ui-state-error ui-corner-all">
											<p>
												<span class="ui-icon ui-icon-alert" style="float: left; margin-right: 0.3em;"></span>
												<strong>Alert:</strong>
												<xforms:output ref="instance('flickr-response')/err/@msg"></xforms:output>
											</p>
										</div>
									</div>
								</xforms:group>
								<div>
									<xforms:input ref="flickr_api_key" incremental="true">
										<xforms:label>flickr API Key</xforms:label>
										<xforms:send submission="test-for-echo" ev:event="xforms-value-changed"></xforms:send>
									</xforms:input>
									<p>A <a href="http://www.flickr.com/services/api/misc.api_keys.html">flickr API key</a> is required in order to take advantage of flickr image linking.</p>
								</div>
								<div>
									<xforms:input ref="flickr_api_secret" incremental="true">
										<xforms:label>flickr API Secret</xforms:label>
									</xforms:input>
									<p>A <a href="http://www.flickr.com/services/api/misc.api_keys.html">flickr API secret</a> is required to insert tags through EADitor.</p>
								</div>
								<div>
									<xforms:input ref="geonames_api_key" incremental="true">
										<xforms:label>Geonames API Key</xforms:label>
									</xforms:input>
								</div>
							</div>
							<div class="section">
								<h3>Google Analytics</h3>
								<p>Copy and paste Javascript code provided by Google Analytics here.</p>
								<div>
									<xforms:textarea ref="google_analytics">
										<xforms:label>Code</xforms:label>
									</xforms:textarea>
								</div>
							</div>
							<div class="section">
								<xforms:group ref="containertypes">
									<h3>Container Types</h3>
									<xforms:trigger appearance="minimal">
										<xforms:label>
											<span class="glyphicon glyphicon-plus"></span>New Container</xforms:label>
										<xforms:insert ev:event="DOMActivate" context="." nodeset="./child::node()[last()]" origin="xforms:element('container', (xforms:attribute('value', '')))"
										></xforms:insert>
									</xforms:trigger>
									<table class="table">
										<thead>
											<tr>
												<th>Container Label</th>
												<th>Level</th>
												<th>Delete</th>
											</tr>
										</thead>
										<tbody>
											<xforms:repeat nodeset="container">
												<tr>
													<td>
														<xforms:input ref=".">
															<xforms:alert>Required</xforms:alert>
														</xforms:input>
													</td>
													<td>
														<xforms:input ref="@value">
															<xforms:alert>Required; must be xs:NMTOKEN type</xforms:alert>
														</xforms:input>
													</td>
													<td>
														<xforms:group ref=".[count(parent::node()/container) &gt; 1]">
															<xforms:trigger appearance="minimal">
																<xforms:delete ev:event="DOMActivate" nodeset="."></xforms:delete>
																<xforms:label>
																	<span class="glyphicon glyphicon-remove"></span>
																</xforms:label>
															</xforms:trigger>
														</xforms:group>
													</td>
												</tr>
											</xforms:repeat>
										</tbody>
									</table>
								</xforms:group>
							</div>
							<div class="section">
								<xforms:group ref="facets">
									<h3>Facets</h3>
									<span class="add">
										<xforms:trigger appearance="minimal">
											<xforms:label>
												<span class="glyphicon glyphicon-plus"></span>Facet</xforms:label>
											<xforms:insert context="." nodeset="./child::node()[last()]" origin="xforms:element('facet')" ev:event="DOMActivate"></xforms:insert>
										</xforms:trigger>
									</span>
									<p>The facet must be a valid Solr string-based field (preferably defined by the *_facet dynamicField type in the schema). An invalid field will cause the browse and
										map pages to fail. Note that the order of the facets below dictates the order in which they appear on the browse and maps pages.</p>
									<xforms:repeat nodeset="facet">
										<xforms:var name="position" select="position()"></xforms:var>
										<xforms:var name="val" select="."/>
										<div>
											<xforms:input ref=".">
												<xforms:label>Facet</xforms:label>
											</xforms:input>
											<xforms:group ref=".[$position != 1]">
												<xforms:trigger appearance="minimal">
													<xforms:label><span class="glyphicon glyphicon-arrow-up"></span></xforms:label>
													<xforms:action ev:event="DOMActivate">														
														<xforms:insert context="instance('config')/facets" nodeset="facet" at="$position - 2" origin="xforms:element('facet', $val)"></xforms:insert>
														<xforms:delete nodeset="."></xforms:delete>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
											<xforms:group ref=".[not($position=count(parent::node()/facet))]">
												<xforms:trigger appearance="minimal">
													<xforms:label><span class="glyphicon glyphicon-arrow-down"></span></xforms:label>
													<xforms:action ev:event="DOMActivate">														
														<xforms:insert context="instance('config')/facets" nodeset="facet" at="$position+1" origin="xforms:element('facet', $val)"></xforms:insert>
														<xforms:delete nodeset="."></xforms:delete>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
											<xforms:trigger appearance="minimal">
												<xforms:delete ev:event="DOMActivate" context="."></xforms:delete>
												<xforms:label>
													<span class="glyphicon glyphicon-remove"></span>
												</xforms:label>
											</xforms:trigger>
										</div>
									</xforms:repeat>
								</xforms:group>
							</div>
							<div class="section">
								<h3>Advanced Settings</h3>
								<p>
									<b>Only change these options if Orbeon is run on a separate server.</b>
								</p>
								<p>Changing these options to an inactive URL could break public display and web form functionality.</p>
								<div class="subsection">
									<h4>Solr URLs</h4>
									<div>
										<xforms:input ref="solr_published">
											<xforms:label>Published</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:input>
									</div>
								</div>
							</div>
						</xforms:group>
					</div>
					<!--<fr:xforms-inspector></fr:xforms-inspector>-->
				</div>
			</div>
		</div>
		<xxf:dialog id="xeac-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Connect to xEAC</xforms:label>
			<p>Insert the URL for a xEAC installation below.</p>
			<xforms:group ref="instance('control-instance')">
				<div>
					<xforms:input ref="xeac">
						<xforms:label>xEAC URL</xforms:label>
					</xforms:input>
					<xforms:trigger>
						<xforms:label>Connect</xforms:label>
						<xforms:send submission="query-xeac" ev:event="DOMActivate"></xforms:send>
					</xforms:trigger>
					<xforms:group ref=".[string(instance('config')/xeac)]">
						<xforms:trigger>
							<xforms:label>Clear</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:setvalue ref="instance('config')/xeac"></xforms:setvalue>
								<xxf:hide dialog="xeac-dialog"></xxf:hide>
							</xforms:action>
						</xforms:trigger>
					</xforms:group>
				</div>
				<xforms:group ref=".[xeac-success=true()]">
					<p>xEAC installation found.</p>
					<div>
						<xforms:output ref="instance('xeac-response')/atom:title">
							<xforms:label>Title</xforms:label>
						</xforms:output>
						<xforms:trigger>
							<xforms:label>Select</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:setvalue ref="instance('config')/xeac" value="instance('control-instance')/xeac"></xforms:setvalue>
								<xxf:hide dialog="xeac-dialog"></xxf:hide>
							</xforms:action>
						</xforms:trigger>
					</div>
				</xforms:group>
				<xforms:group ref=".[xeac-success=false() and string-length(xeac) &gt; 0]">
					<div>
						<p class="bg-danger">Unable to parse xEAC Atom feed.</p>
					</div>
				</xforms:group>
			</xforms:group>
		</xxf:dialog>
		<xxf:dialog id="sparql-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Connect to SPARQL Endpoint</xforms:label>
			<p style="width:600px;">Insert the URLs for SPARQL endpoint query and update services below. In the Apache Fuseki endpoint, for example, the Query web service is
				http://localhost:3030/ds/query, Graph Store is http://localhost:3030/ds/data and SPARQL/Update service is located at http://localhost:3030/ds/update</p>
			<xforms:group ref="instance('control-instance')">
				<xforms:group ref=".[sparql-connect=false() or sparql-success=false()]">
					<div>
						<xforms:input ref="sparql/query">
							<xforms:label>Query URL</xforms:label>
							<xforms:alert>Must conform to xs:anyURI</xforms:alert>
						</xforms:input>
					</div>
					<div>
						<xforms:input ref="sparql/store">
							<xforms:label>Graph Store URL</xforms:label>
							<xforms:alert>Must conform to xs:anyURI</xforms:alert>
						</xforms:input>
					</div>
					<div>
						<xforms:input ref="sparql/update">
							<xforms:label>Update URL</xforms:label>
							<xforms:alert>Must conform to xs:anyURI</xforms:alert>
						</xforms:input>
					</div>
					<xforms:trigger bind="sparql-connect">
						<xforms:label>Connect</xforms:label>
						<xforms:action ev:event="DOMActivate">
							<xforms:setvalue ref="instance('control-instance')/sparql-connect">true</xforms:setvalue>
							<!-- first query the sparql endpoint -->
							<xforms:send submission="query-sparql"></xforms:send>
							<xforms:action ev:event="xforms-submit-done">
								<xforms:setvalue ref="instance('control-instance')/sparql-success">true</xforms:setvalue>
								<!-- then test posting and deleting from the update endpoint -->
								<xforms:insert context="instance('rdf')" origin="instance('rdf-test')/rdf:Description"></xforms:insert>
								<xforms:send submission="post-rdf"></xforms:send>
								<xforms:action ev:event="xforms-submit-done">
									<!-- if the RDF test successfully posts, then delete the graph through SPARQL/Update -->
									<xforms:setvalue ref="instance('sparqlUpdate')" value="replace(instance('sparqlUpdate-template'), 'URI', 'http://example.org/')"></xforms:setvalue>
									<xforms:send submission="delete-graph"></xforms:send>
								</xforms:action>
							</xforms:action>
						</xforms:action>
					</xforms:trigger>
				</xforms:group>
				<xforms:group ref=".[sparql-success=true()]">
					<div>
						<p class="bg-success">SPARQL endpoints found.</p>
						<div>
							<xforms:output ref="instance('control-instance')/sparql/query">
								<xforms:label>Query URL</xforms:label>
							</xforms:output>
						</div>
						<div>
							<xforms:output ref="instance('control-instance')/sparql/store">
								<xforms:label>Graph Store URL</xforms:label>
							</xforms:output>
						</div>
						<div>
							<xforms:output ref="instance('control-instance')/sparql/update">
								<xforms:label>Update URL</xforms:label>
							</xforms:output>
						</div>
						<xforms:trigger>
							<xforms:label>Confirm</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:setvalue ref="instance('config')/sparql/query" value="instance('control-instance')/sparql/query"></xforms:setvalue>
								<xforms:setvalue ref="instance('config')/sparql/update" value="instance('control-instance')/sparql/update"></xforms:setvalue>
								<xforms:setvalue ref="instance('config')/sparql/store" value="instance('control-instance')/sparql/store"></xforms:setvalue>
								<xxf:hide dialog="sparql-dialog"></xxf:hide>
								<xforms:dispatch target="publish-all" name="fr-show"></xforms:dispatch>
							</xforms:action>
						</xforms:trigger>
					</div>
				</xforms:group>
				<xforms:group ref=".[sparql-success=false() and sparql-connect=true()]">
					<div>
						<p class="bg-danger">Unable to query SPARQL endpoint.</p>
					</div>
				</xforms:group>
			</xforms:group>
		</xxf:dialog>
		<fr:alert-dialog id="publish-all">
			<fr:label>Publish RDF</fr:label>
			<fr:message>Do you want to post all published records into the SPARQL endpoint? It may take several minutes.</fr:message>
			<fr:negative-choice></fr:negative-choice>
			<fr:positive-choice>
				<xforms:send ev:event="DOMActivate" submission="publish-rdf"></xforms:send>
			</fr:positive-choice>
		</fr:alert-dialog>
	</body>
</html>
